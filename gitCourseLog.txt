This document displays and explains features about Git. Most of the content is grapped from 
James Wyndham's PluralSight course Git Fundamentals

Useful Git bash alias
alias ls='ls -alsF --color=auto --show-control-chars' // shows 'ls' with colors and all options

Initialise repo as a git repo
$ git init 

Git configurations can be done in multiple levels. Git's config is heirarchical.
$ git config --system -> system wide | Program Files\
$ git config --global -> for the user | User\<name>\.gitconfig
$ git config          -> for repo | .gitconfig file inside repo

Git config example
$ git config --global user.name "Jesper Baltzersen" // sets user.name
$ git config --global alias.lga "log --graph --oneline --all --decorate" // creating aliases for git commands use $ git lga


Configured settings
$ git config --global --list
	user.name=Jesper Baltzersen
	user.email=jesperbaltzersen@gmail.com
	user.password=
	help.autocorrect=1 -> this gives fuzzy match capabilities to Git commands i.e. staus = status
	core.editor=vim
	core.autocrlf=true -> converts line endings for windows to linux if true, nothing if false. True is safe and easy
	color.ui=auto

To get a repo from github
$ git clone http//<repo name ending in .git>

To add files 
$ git add <file> -> <.> adds all files
$ git add . -> adds everything
$ git add -A -> adds everything

Commit
$ git commit -> opens specified core.editor for commit message
$ git commit -m "you can type commit messages in line" ->  

Stage changes as multiple commits i.e. if you have changed multiple files, but changes are not related
$ git add <first modified file>
$ git commit -m "this is the first commit"
$ git add <second modified file>
$ git commit -m "this is the second commit"

Information about commits
$ git log
$ git log --oneline
$ git log --oneline | wc -l -> word count, but by line because -l is used
$ git log --oneline --graph
$ git shortlog

Add updated files that have been updated 
$ git add -u -> only adds files displayed as modified, also stages deleted files for deletion 

To find out what has changed between commits
$ git diff <SHA for first commit>..<SHA for second commit> -> SHA's are optained from $ git log
$ git diff HEAD~1..HEAD -> diffs HEAD and one before HEAD
$ git diff HEAD~1.. -> git assumes HEAD for second param if not specified

Undo changes made to a file by resetting to HEAD version for that file
$ git checkout <file name>

Undo all changes made to files. Resets to HEAD
$ git reset --hard

Undo commits to previous commits but keep changes in staging area. Good for making changes to the commit.
$ git reset --soft HEAD~1 -> resets to just before last commit. Contains changes made in staging area

View last commit
$ git show HEAD

Remove unwanted items from staging
$ git clean -n -> shows what will happen
$ git clean -f -> performs the clean

View branches
$ git branch
$ git branch -r -> shows remote brances

View remote branch
$ git remote -v

Set remote tracking branch
$ git branch --set-upstream <local repo> <remote repo>
$ git branch --set-upstream master origin/master


Add remote - you can add multiple remotes for pulling forks of projects from others repo's
$ git remote add origin http://<.git> // http version of repo needs auth
$ git remote add origin git@github.com:/JesperBa... // ssh version uses local private key for auth

Fetch changes from remote branch to current - needs git merge too, which creates a fast-forward (same as git pull)
$ git fetch
$ git fetch <remote name> // in case of multiple remotes

Pull does both fetch and fast-forward
$ git pull
$ git pull 

Tags points to commits - syntactic sugar for commit SHA1 hashes - stays on that commit
$ git tag v1.0
$ git tag -a v1.0_with_message
$ git tag -s v1.0_signed

Push Tags to remote - they do not push automatically
$ git push --tags

Verify tag
$ git tag -v <tagName>

Verify commit
$ git verify-commit <commitSHA>

Using ssh key
1. generate key
2. check for existing ssh agent
3. add key to ssh-agent
4. copy key to clip board
5. paste in to github -> under settings for account (top right corner)
$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
$ eval "$(ssh-agent -s)" // Agent pid 132213
$ ssh-add ~/.ssh/id_rsa
$ clip < ~/.ssh/id_rsa.pub

Using gpg key gnu privacy guard. The keys are stored in c/Users/JesperBaltzersen/.gnupg/secring.gpg
Should upgrade to newer version 2.1 ~modern 
1. genereate key
2. list keys // use <keyId> for following operations
3. print keys in ascii format for pasting to github -> under settings for account (top right corner)
$ gpg --gen-key
$ gpg --list-keys
	/c/Users/JesperBaltzersen/.gnupg/pubring.gpg
	--------------------------------------------
	pub   xxxxx/<keyId> 2016-06-03 [expires: 2021-06-02]
	uid                  Jesper Baltzersen (jesperbaltzersen.dk) <jesperbaltzersen@gmail.com>
	sub   xxxxx/xxxxxxxx 2016-06-03 [expires: 2021-06-02]
$ git config --global user.signingkey "<keyId>" //tells git which key to use for the signed in user on system
$ gpg --armor --export "<keyId>" //returns the in ascii - copy and paste it from -----BEGIN to KEY BLOCK-----

Diff - standard is to show difference by line, even if only a single word was changed
git diff --cached // compares repo to staging
git diff --word-diff // show diff by word instead of by line as is default
git diff --unified=10 // shows 10 lines of each side of change instead of default 3

Working with Git branches 

$ git log --graph --oneline // list of commits on current branch
$ git log --graph --onleline --all  // list commits from all branches
	* cd3c3cf added verification instructions
	* 73b5dd9 signing shit
	* d6f73dc adding course log
	* e8fd8fd some goodies.....narh not really

$ git log --graph --onleline --all -- decorate // list commits from all branches + tag/branch info
	* cd3c3cf (HEAD -> master, origin/master) added verification instructions
	* 73b5dd9 (tag: v1.0_signed) signing shit
	* d6f73dc adding course log
	* e8fd8fd (tag: v1.0_with_message, tag: v1.0) some goodies.....narh not really

Branching - branches are labels on SHA1 hashes for commits - branches follow commits (tags don't)
$ git branch <newBranchName> // creates new branch
$ git checkout <newBranchName> // makes <newBranchName> the active branch
$ git branch -b <newBranchName> // creates and checkout of branch
$ git branch -m <exsitingBranchName> <newBranchName> // rename branch by moving it
$ git branch -d <branchName> // delete branch (can't delete unmerged branches), -D forces deletion 

Create remote branch
$ git push <remoteName/origin> <local branch name> // creates <branch name> at remote with same branch name as <local branch> 
$ git push <remoteName/origin> <local branch name>:<remote branch name> // optionally specify other name for remote branch 
$ git push origin <branchName> // if remote is named origin - can be different if working with multiple remotes

Delete remote branch - push empty
$ git push origin :<remote branch name>


Stashing - temporary holding area - for stuff thats not ready to be commited to a branch
$ git stash // saves changes made to working copy and rolls back working copy
$ git stash list // shows changes saved in stash
$ git stash apply // reapplies changes saved in stash - does not remove stash from list
$ git stash pop // reapplies changes saved in stash - does remove stash from list
$ git stash drop // removes top of stash stack

Rebasing - rewinds head to branch-out point and replays rewinded changes on top of rebase branch
git rebase master // rewinds current branch and replays it on top of master - looks like current branch is just done on top of master
git rebase --continue // used when rebase causes merge conflicts. Is used after each resolved merge

Retrieving deleted branches
$ git reflog // list of previous HEAD pointers - this log only kept for 30 days by default
$ git branch <branchName> <SHA1CommitFromRefLog> //

Cherry pick commit - apply commit to branch (it will exists both places, only applies the chosen commit)
$ git cherry-pick <SHA1>

Branch info
$ git remote -v


